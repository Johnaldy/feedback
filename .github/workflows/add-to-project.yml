name: Add Issue to Project Board

on:
  issues:
    types: [opened, reopened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to add to project"
        required: true
        type: number

jobs:
  add_to_project:
    name: Add issue to project
    runs-on: ubuntu-latest
    steps:
      - name: Get issue details
        id: get_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Determine issue number from trigger
            let issueNumber;
            if (context.payload.inputs && context.payload.inputs.issue_number) {
              issueNumber = parseInt(context.payload.inputs.issue_number);
            } else if (context.payload.issue) {
              issueNumber = context.payload.issue.number;
            } else {
              throw new Error("No issue number found");
            }
            
            console.log(`Working with issue #${issueNumber}`);
            
            // First, get the issue node ID (GraphQL ID, not the number)
            const issueData = await github.graphql(`
              query($owner:String!, $repo:String!, $number:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$number) {
                    id
                    title
                    body
                  }
                }
              }
            `, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: issueNumber
            });
            
            // Store the issue node ID
            const issueId = issueData.repository.issue.id;
            const issueBody = issueData.repository.issue.body;
            console.log(`Issue GraphQL ID: ${issueId}`);
            console.log(`Issue Title: ${issueData.repository.issue.title}`);
            
            core.setOutput('issue_id', issueId);
            core.setOutput('issue_number', issueNumber);
            
            // Extract AVG from title if present
            const avgMatch = issueData.repository.issue.title.match(/\[AVG: ([\d\.]+)\]/);
            if (avgMatch && avgMatch[1]) {
              const avgScore = parseFloat(avgMatch[1]);
              console.log(`Found AVG score: ${avgScore}`);
              core.setOutput('avg_score', avgScore);
            }
            
            // Helper function to extract form fields with various formats
            function extractValue(fieldName, isNumber = false) {
              // Try multiple patterns to match various form formats
              const patterns = [
                // Form checkbox/dropdown selection format
                new RegExp(`${fieldName}.*?\\n.*?- (.*?)($|\\n)`, 's'),
                // Form input format
                new RegExp(`${fieldName}.*?\\n\\s*(.*?)($|\\n)`, 's'),
                // Key-value format
                new RegExp(`${fieldName}.*?: *(.*?)($|\\n)`, 's'),
                // GitHub form format with ###
                new RegExp(`### ${fieldName}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // Direct match for numbers
                isNumber ? new RegExp(`${fieldName}[\\s\\S]*?(\\d+\\.?\\d*)`) : null
              ].filter(Boolean);
              
              for (const pattern of patterns) {
                const match = issueBody.match(pattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              // Try extracting by form field ID
              const fieldIdMap = {
                'AVG Overall Customer Satisfaction': 'overall_satisfaction',
                'AVG Quality of Work/Material': 'quality_of_work',
                'AVG Effectiveness of Communication': 'communication',
                'AVG Impact/Value of Service': 'impact_value',
                'Partner Name': 'partner_name',
                'Engagement Type': 'engagement_type',
                'Date Completed': 'date_completed',
                'Vertical': 'vertical'
              };
              
              const fieldId = fieldIdMap[fieldName];
              if (fieldId) {
                const idPattern = new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's');
                const match = issueBody.match(idPattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              return null;
            }
            
            // Extract partner name and other data
            const partnerName = extractValue('Partner Name');
            const engagementType = extractValue('Engagement Type');
            const vertical = extractValue('Vertical');
            
            // Output these values for later steps
            if (partnerName) {
              console.log(`Partner Name: ${partnerName}`);
              core.setOutput('partner_name', partnerName);
            }
            
            if (engagementType) {
              console.log(`Engagement Type: ${engagementType}`);
              core.setOutput('engagement_type', engagementType);
            }
            
            if (vertical) {
              console.log(`Vertical: ${vertical}`);
              core.setOutput('vertical', vertical);
            }

      - name: Get project ID
        id: get_project
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Get the project node ID (GraphQL ID)
            const projectNumber = 7;  // Your project number
            const owner = 'Johnaldy'; // Your username
            
            try {
              const projectData = await github.graphql(`
                query($owner:String!, $number:Int!) {
                  user(login:$owner) {
                    projectV2(number:$number) {
                      id
                      title
                      url
                    }
                  }
                }
              `, {
                owner: owner,
                number: projectNumber
              });
              
              // Store the project node ID
              const projectId = projectData.user.projectV2.id;
              const projectTitle = projectData.user.projectV2.title;
              const projectUrl = projectData.user.projectV2.url;
              
              console.log(`Project GraphQL ID: ${projectId}`);
              console.log(`Project Title: ${projectTitle}`);
              console.log(`Project URL: ${projectUrl}`);
              
              core.setOutput('project_id', projectId);
              core.setOutput('project_title', projectTitle);
              
            } catch (error) {
              console.log(`Error getting project: ${error.message}`);
              throw error;
            }

      - name: Add issue to project
        id: add_to_project
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issueId = '${{ steps.get_issue.outputs.issue_id }}';
            const projectId = '${{ steps.get_project.outputs.project_id }}';
            
            if (!issueId || !projectId) {
              throw new Error("Missing required IDs");
            }
            
            let itemId;
            
            try {
              // Add the issue to the project
              const addItemMutation = await github.graphql(`
                mutation($projectId:ID!, $contentId:ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: projectId,
                contentId: issueId
              });
              
              console.log("Successfully added issue to project");
              itemId = addItemMutation.addProjectV2ItemById.item.id;
              console.log(`Project item ID: ${itemId}`);
              core.setOutput('item_id', itemId);
              
            } catch (error) {
              if (error.message.includes("already exists")) {
                // Issue is already in the project, so find it
                console.log("Issue already in project, looking up the item...");
                
                try {
                  // Find the existing project item
                  const itemsQuery = await github.graphql(`
                    query($projectId:ID!, $first:Int!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          items(first: $first) {
                            nodes {
                              id
                              content {
                                ... on Issue {
                                  id
                                  number
                                  title
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `, {
                    projectId: projectId,
                    first: 100 // Retrieve up to 100 items
                  });
                  
                  // Find the item with matching issue ID
                  const items = itemsQuery.node.items.nodes;
                  const matchingItem = items.find(item => 
                    item.content && 
                    item.content.id === issueId
                  );
                  
                  if (matchingItem) {
                    console.log(`Found existing project item: ${matchingItem.id}`);
                    console.log(`For issue #${matchingItem.content.number}: ${matchingItem.content.title}`);
                    itemId = matchingItem.id;
                    core.setOutput('item_id', matchingItem.id);
                  } else {
                    console.log("Could not find existing item in project");
                    throw new Error("Issue should be in project but couldn't find it");
                  }
                  
                } catch (lookupError) {
                  console.log(`Error looking up existing item: ${lookupError.message}`);
                  throw lookupError;
                }
              } else {
                console.log(`Error adding issue to project: ${error.message}`);
                throw error;
              }
            }
            
            // Wait a moment for the item to be fully created in the project
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Return the item ID for the next step
            return itemId;

      - name: Set project fields
        if: steps.add_to_project.outputs.itemId != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          retries: 3
          script: |
            const itemId = '${{ steps.add_to_project.outputs.itemId }}';
            const projectId = '${{ steps.add_to_project.outputs.projectId }}';
            
            // Verify we have the necessary IDs
            if (!itemId || !projectId) {
              console.log('Missing required IDs');
              console.log(`Item ID: ${itemId}`);
              console.log(`Project ID: ${projectId}`);
              return;
            }
            
            console.log(`Using Item ID: ${itemId}`);
            console.log(`Using Project ID: ${projectId}`);
            
            // Function to safely execute GraphQL queries with retries
            async function executeQuery(query, variables = {}, retries = 3) {
              let lastError;
              for (let i = 0; i < retries; i++) {
                try {
                  console.log(`Attempt ${i+1} for GraphQL query`);
                  return await github.graphql(query, variables);
                } catch (error) {
                  console.log(`Attempt ${i+1} failed: ${error.message}`);
                  lastError = error;
                  // Wait briefly before retrying
                  await new Promise(resolve => setTimeout(resolve, 2000));
                }
              }
              throw new Error(`Failed after ${retries} attempts. Last error: ${lastError.message}`);
            }
            
            try {
              // Get all fields in the project with detailed logging
              console.log('Fetching project fields...');
              
              // Basic query to get project fields
              const projectQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                            dataType
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2NumberField {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const result = await executeQuery(projectQuery, { projectId });
              console.log('Project fields retrieved successfully');
              
              if (!result.node || !result.node.fields) {
                console.log('Could not retrieve project fields');
                return;
              }
              
              console.log(`Project name: ${result.node.title}`);
              
              const fields = result.node.fields.nodes;
              
              // Helper function to find field by name (case insensitive partial match)
              function findField(searchTerms) {
                if (!Array.isArray(searchTerms)) {
                  searchTerms = [searchTerms];
                }
                
                for (const term of searchTerms) {
                  console.log(`Looking for field matching: "${term}"`);
                  // Try exact match first
                  let field = fields.find(f => 
                    f.name && f.name.toLowerCase() === term.toLowerCase()
                  );
                  
                  // If no exact match, try contains
                  if (!field) {
                    field = fields.find(f => 
                      f.name && f.name.toLowerCase().includes(term.toLowerCase())
                    );
                  }
                  
                  if (field) {
                    console.log(`Found matching field: ${field.name} (${field.id})`);
                    return field;
                  }
                }
                console.log(`No field found matching any of: ${searchTerms}`);
                return null;
              }
              
              // Helper function to find option in a select field
              function findOption(field, searchTerm) {
                if (!field.options) {
                  console.log(`Field ${field.name} has no options`);
                  return null;
                }
                
                console.log(`Looking for option matching: "${searchTerm}" in field ${field.name}`);
                
                // Try exact match first
                let option = field.options.find(o => 
                  o.name.toLowerCase() === searchTerm.toLowerCase()
                );
                
                // If no exact match, try contains (bidirectional)
                if (!option) {
                  option = field.options.find(o => 
                    o.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    searchTerm.toLowerCase().includes(o.name.toLowerCase())
                  );
                }
                
                if (option) {
                  console.log(`Found option: ${option.name} (${option.id})`);
                } else {
                  console.log(`No matching option found for "${searchTerm}" in field ${field.name}`);
                  console.log("Available options:");
                  field.options.forEach(o => console.log(`- ${o.name}`));
                }
                
                return option;
              }
              
              // Helper function to update a field
              async function updateField(field, value) {
                if (!field) return false;
                
                try {
                  console.log(`Updating field ${field.name} with value: ${value}`);
                  
                  let valueObj = {};
                  
                  // Determine the right type of value to use
                  if (field.dataType === 'NUMBER') {
                    const numValue = parseFloat(value);
                    if (!isNaN(numValue)) {
                      valueObj = { number: numValue };
                    } else {
                      valueObj = { text: value };
                    }
                  } else if (field.options) {  // Single select field
                    const option = findOption(field, value);
                    if (option) {
                      valueObj = { singleSelectOptionId: option.id };
                    } else {
                      console.log(`No matching option for "${value}" in field ${field.name}, skipping update`);
                      return false;
                    }
                  } else {
                    valueObj = { text: value };
                  }
                  
                  console.log(`Field value object: ${JSON.stringify(valueObj)}`);
                  
                  const mutation = `
                    mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $value:ProjectV2FieldValue!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: $value
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `;
                  
                  await executeQuery(mutation, {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: field.id,
                    value: valueObj
                  });
                  
                  console.log(`Successfully updated ${field.name} field`);
                  return true;
                } catch (error) {
                  console.log(`Error updating field ${field.name}: ${error.message}`);
                  return false;
                }
              }
              
              // Get values from context
              const avgScore = '${{ steps.get_issue.outputs.avg_score }}' || null;
              const partnerName = '${{ steps.get_issue.outputs.partner_name }}' || null;
              const engagementType = '${{ steps.get_issue.outputs.engagement_type }}' || null;
              const vertical = '${{ steps.get_issue.outputs.vertical }}' || null;
              
              // Update AVG Score field
              if (avgScore) {
                const avgField = findField(['avg', 'score', 'rating']);
                if (avgField) {
                  await updateField(avgField, avgScore);
                }
              }
              
              // Update Partner field
              if (partnerName) {
                const partnerField = findField(['partner', 'company', 'client']);
                if (partnerField) {
                  await updateField(partnerField, partnerName);
                }
              }
              
              // Update Engagement Type field
              if (engagementType) {
                const typeField = findField(['engagement', 'type']);
                if (typeField) {
                  await updateField(typeField, engagementType);
                }
              }
              
              // Update Vertical field
              if (vertical) {
                const verticalField = findField(['vertical', 'industry', 'sector']);
                if (verticalField) {
                  await updateField(verticalField, vertical);
                }
              }
              
            } catch (error) {
              console.log(`Error in project integration: ${error.message}`);
              console.log(error.stack);
            }

      # If the above direct approach fails, try a simpler approach with the GitHub CLI
      - name: Fallback - Use GitHub CLI
        if: failure() || steps.add_to_project.outcome == 'failure'
        run: |
          echo "Attempting fallback approach with GitHub CLI"
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update
          sudo apt install gh
          
          # Authenticate with the PAT
          echo "${{ secrets.PROJECT_PAT }}" | gh auth login --with-token
          
          # Get issue number from input or context
          if [[ -n "${{ inputs.issue_number }}" ]]; then
            ISSUE_NUMBER="${{ inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          
          # Get issue info
          gh issue view $ISSUE_NUMBER --repo ${{ github.repository }} --json title,url,number
          
          # Add to project using project URL
          echo "Adding issue #$ISSUE_NUMBER to project..."
          gh project item-add https://github.com/users/Johnaldy/projects/7 --url https://github.com/${{ github.repository }}/issues/$ISSUE_NUMBER
          
          echo "Project integration completed via CLI at 2025-07-09 17:21:50"

name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    # Only run on issues with the feedback label or title containing [Feedback]
    if: contains(github.event.issue.title, '[Feedback]') || contains(github.event.issue.labels.*.name, 'feedback')
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      # Add this check to prevent duplicate runs on edited issues that already have AVG comments
      - name: Check for existing AVG comments
        id: check_comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Check if this is an edit and we've already processed it
            if (context.payload.action === 'edited') {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              });
              
              // Look for our Feedback Analysis comment
              const hasAnalysisComment = comments.data.some(
                comment => comment.body && comment.body.includes('Feedback Analysis')
              );
              
              if (hasAnalysisComment) {
                console.log('Issue already has Feedback Analysis comment, skipping processing');
                core.setOutput('skip_processing', 'true');
                return;
              }
            }
            
            core.setOutput('skip_processing', 'false');

      - name: Add feedback label if missing
        if: steps.check_comments.outputs.skip_processing != 'true' && !contains(github.event.issue.labels.*.name, 'feedback')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['feedback']
            })

      - name: Extract feedback data
        if: steps.check_comments.outputs.skip_processing != 'true'
        id: extract_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Log the full body for debugging
            console.log("Issue Body:", body);
            
            // Function to extract numeric rating from dropdown selection
            function extractRating(value) {
              if (!value) return null;
              
              // Extract the numeric part from strings like "5 - Extremely Satisfied"
              const match = value.match(/^(\d+(\.\d+)?)/);
              if (match && match[1]) {
                return parseFloat(match[1]);
              }
              return null;
            }
            
            // This more comprehensive function tries multiple patterns to extract form data
            function extractFormValue(fieldName, fieldId) {
              // Array of regex patterns to try
              const patterns = [
                // GitHub form format with field ID
                new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // GitHub form format with field name
                new RegExp(`### ${fieldName}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // Standard form field format
                new RegExp(`${fieldName}[\\s\\S]*?\\n[\\s\\*]*(.+?)(?=\\n|$)`, 's'),
                // Simple key-value format
                new RegExp(`${fieldName}[\\s\\S]*?: *(.+?)(?=\\n|$)`, 's'),
                // Checkbox/dropdown format
                new RegExp(`${fieldName}[\\s\\S]*?\\n[\\s\\*]*- \\[(?:x|X)\\] *(.+?)(?=\\n|$)`, 's'),
                // Plain list format
                new RegExp(`${fieldName}[\\s\\S]*?\\n[\\s\\*]*- *(.+?)(?=\\n|$)`, 's'),
              ];
              
              // Try each pattern
              for (const pattern of patterns) {
                const match = body.match(pattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  console.log(`Found ${fieldName}/${fieldId}: ${value} using pattern ${pattern}`);
                  return value;
                }
              }
              
              console.log(`Could not find value for ${fieldName}/${fieldId}`);
              return null;
            }
            
            // Field mappings
            const fieldMap = [
              { name: 'Partner Name', id: 'partner_name' },
              { name: 'Date Completed', id: 'date_completed' },
              { name: 'Engagement Type', id: 'engagement_type' },
              { name: 'AVG Overall Customer Satisfaction', id: 'avg_satisfaction' },
              { name: 'AVG Quality of Work/Material', id: 'avg_quality' },
              { name: 'AVG Effectiveness of Communication', id: 'avg_communication' },
              { name: 'AVG Impact/Value of Service', id: 'avg_impact' },
              { name: 'Vertical', id: 'vertical' }
            ];
            
            // Extract all field values
            let extractedValues = {};
            for (const field of fieldMap) {
              extractedValues[field.id] = extractFormValue(field.name, field.id);
            }
            
            // Special case for "other" partner
            if (extractedValues.partner_name === 'Other') {
              const otherPartner = extractFormValue('If Other, specify partner name', 'other_partner');
              if (otherPartner) {
                extractedValues.partner_name = otherPartner;
              }
            }
            
            // Extract rating scores
            const ratingFields = ['avg_satisfaction', 'avg_quality', 'avg_communication', 'avg_impact'];
            let totalScore = 0;
            let validRatings = 0;
            
            for (const field of ratingFields) {
              const ratingText = extractedValues[field];
              if (ratingText) {
                // First try direct numeric extraction (for values like "5 - Excellent")
                let score = null;
                const numericMatch = ratingText.match(/^(\d+)/);
                if (numericMatch && numericMatch[1]) {
                  score = parseFloat(numericMatch[1]);
                }
                
                // If that fails, try mapping text ratings to scores
                if (score === null) {
                  const ratingMap = {
                    'extremely satisfied': 5, 'very satisfied': 4, 'satisfied': 3,
                    'somewhat dissatisfied': 2, 'very dissatisfied': 1,
                    'excellent': 5, 'good': 4, 'satisfactory': 3,
                    'below average': 2, 'poor': 1,
                    'extremely impactful': 5, 'very impactful': 4, 'moderately impactful': 3,
                    'slightly impactful': 2, 'not impactful': 1
                  };
                  
                  // Try to match text rating (case insensitive)
                  const lowerRating = ratingText.toLowerCase();
                  for (const [text, value] of Object.entries(ratingMap)) {
                    if (lowerRating.includes(text)) {
                      score = value;
                      break;
                    }
                  }
                }
                
                if (score !== null && !isNaN(score)) {
                  console.log(`${field} score: ${score} (from "${ratingText}")`);
                  totalScore += score;
                  validRatings += 1;
                }
              }
            }
            
            // Calculate final AVG score
            const finalAvgScore = validRatings > 0 ? (totalScore / validRatings).toFixed(2) : "N/A";
            console.log(`Final AVG Score: ${finalAvgScore} (from ${validRatings} valid ratings out of ${ratingFields.length})`);
            
            // Set outputs
            core.setOutput('avg_score', finalAvgScore);
            core.setOutput('partner_name', extractedValues.partner_name || "Unknown");
            core.setOutput('date_completed', extractedValues.date_completed || "Unknown");
            core.setOutput('engagement_type', extractedValues.engagement_type || "Unknown");
            core.setOutput('vertical', extractedValues.vertical || "Unknown");
            
            // Debug info
            console.log("EXTRACTED VALUES:", JSON.stringify(extractedValues, null, 2));

      # Add step to generate timestamp in UTC
      - name: Get current timestamp
        id: current_time
        run: |
          echo "TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Add AVG score comment
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Retrieve the extracted data
            const avgScore = '${{ steps.extract_data.outputs.avg_score }}';
            const partnerName = '${{ steps.extract_data.outputs.partner_name }}';
            const dateCompleted = '${{ steps.extract_data.outputs.date_completed }}';
            const engagementType = '${{ steps.extract_data.outputs.engagement_type }}';
            const vertical = '${{ steps.extract_data.outputs.vertical }}';
            
            console.log("Comment Values:");
            console.log("AVG Score:", avgScore);
            console.log("Partner Name:", partnerName);
            console.log("Date Completed:", dateCompleted);
            console.log("Engagement Type:", engagementType);
            console.log("Vertical:", vertical);
            
            const comment = `## Feedback Analysis
            
            📊 **AVG Score**: ${avgScore}
            👥 **Partner**: ${partnerName}
            📅 **Date Completed**: ${dateCompleted}
            📝 **Engagement Type**: ${engagementType}
            🌎 **Vertical**: ${vertical}
            
            *This analysis was automatically generated based on the feedback submission.*
            *Last processed: ${{ env.TIMESTAMP }} UTC*
            *Generated by: ${{ github.actor }}*
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Update issue title to include AVG score if not already there
            if (!context.payload.issue.title.includes('AVG:')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `${context.payload.issue.title} [AVG: ${avgScore}]`
              });
            }

      # Trigger the new add-to-project-cli workflow
      - name: Trigger Add to Project CLI
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'add-to-project-cli.yml',
                ref: 'main',  // Make sure this matches your default branch
                inputs: {
                  issue_number: context.issue.number.toString()
                }
              });
              console.log(`Triggered add-to-project-cli workflow for issue #${context.issue.number}`);
            } catch (error) {
              console.log(`Error triggering add-to-project-cli workflow: ${error.message}`);
              
              // If the workflow doesn't exist yet or can't be triggered, invoke the issue URL directly
              console.log("Falling back to direct project integration...");
              
              const issueId = context.payload.issue.node_id;
              console.log(`Issue GraphQL Node ID: ${issueId}`);
              
              // This is a simple announcement so we know what's happening
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: "⚙️ Attempting to add this issue to the project board. Check the Actions tab for progress."
              });
            }

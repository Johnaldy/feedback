name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    # Only run on issues with the feedback label or title containing [Feedback]
    if: contains(github.event.issue.title, '[Feedback]') || contains(github.event.issue.labels.*.name, 'feedback')
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      # Add this check to prevent duplicate runs on edited issues that already have AVG comments
      - name: Check for existing AVG comments
        id: check_comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Check if this is an edit and we've already processed it
            if (context.payload.action === 'edited') {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              });
              
              // Look for our Feedback Analysis comment
              const hasAnalysisComment = comments.data.some(
                comment => comment.body && comment.body.includes('Feedback Analysis')
              );
              
              if (hasAnalysisComment) {
                console.log('Issue already has Feedback Analysis comment, skipping processing');
                core.setOutput('skip_processing', 'true');
                return;
              }
            }
            
            core.setOutput('skip_processing', 'false');

      - name: Add feedback label if missing
        if: steps.check_comments.outputs.skip_processing != 'true' && !contains(github.event.issue.labels.*.name, 'feedback')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['feedback']
            })

      - name: Extract feedback data
        if: steps.check_comments.outputs.skip_processing != 'true'
        id: extract_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Debug output to see the full body content
            console.log("Processing feedback extraction for issue:", issue.number);
            
            // Function to extract numeric rating from dropdown selection
            function extractRating(value) {
              if (!value) return null;
              
              // Extract the numeric part from strings like "5 - Extremely Satisfied"
              const match = value.match(/^(\d+(\.\d+)?)/);
              if (match && match[1]) {
                return parseFloat(match[1]);
              }
              return null;
            }
            
            // Modified helper function specifically for GitHub form fields
            function extractFormField(fieldId) {
              const pattern = new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's');
              const match = body.match(pattern);
              
              if (match && match[1]) {
                return match[1].trim();
              }
              return null;
            }
            
            // Extract form field values using their IDs from the form template
            const partnerName = extractFormField('partner_name') || extractFormField('other_partner');
            const dateCompleted = extractFormField('date_completed');
            const engagementType = extractFormField('engagement_type');
            const vertical = extractFormField('vertical');
            
            // Extract ratings as full text strings first
            const satisfactionText = extractFormField('avg_satisfaction');
            const qualityText = extractFormField('avg_quality');
            const communicationText = extractFormField('avg_communication');
            const impactText = extractFormField('avg_impact');
            
            // Convert ratings to numeric values
            const overallSatisfaction = extractRating(satisfactionText);
            const qualityOfWork = extractRating(qualityText);
            const communication = extractRating(communicationText);
            const impactValue = extractRating(impactText);
            
            // Debug outputs
            console.log('Extracted Partner Name:', partnerName);
            console.log('Extracted Engagement Type:', engagementType);
            console.log('Extracted Date Completed:', dateCompleted);
            console.log('Extracted Vertical:', vertical);
            console.log('Satisfaction Rating:', overallSatisfaction);
            console.log('Quality Rating:', qualityOfWork);
            console.log('Communication Rating:', communication);
            console.log('Impact Rating:', impactValue);
            
            // Calculate AVG score
            let avgScore = 0;
            let validRatings = 0;
            
            const addRating = (rating) => {
              if (rating !== null && !isNaN(rating)) {
                avgScore += rating;
                validRatings += 1;
              }
            };
            
            addRating(overallSatisfaction);
            addRating(qualityOfWork);
            addRating(communication);
            addRating(impactValue);
            
            const finalCsatScore = validRatings > 0 ? (avgScore / validRatings).toFixed(2) : "N/A";
            console.log(`Final AVG Score: ${finalCsatScore} (from ${validRatings} valid ratings)`);
            
            // Set outputs - ensure these are properly escaped and trimmed
            core.setOutput('avg_score', finalCsatScore);
            core.setOutput('partner_name', partnerName || "Unknown");
            core.setOutput('engagement_type', engagementType || "Unknown");
            core.setOutput('date_completed', dateCompleted || "Unknown");
            core.setOutput('vertical', vertical || "Unknown");

      # Add step to generate timestamp in UTC
      - name: Get current timestamp
        id: current_time
        run: |
          echo "TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Add AVG score comment
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Retrieve the extracted data
            const avgScore = '${{ steps.extract_data.outputs.avg_score }}';
            const partnerName = '${{ steps.extract_data.outputs.partner_name }}';
            const engagementType = '${{ steps.extract_data.outputs.engagement_type }}';
            const dateCompleted = '${{ steps.extract_data.outputs.date_completed }}';
            const vertical = '${{ steps.extract_data.outputs.vertical }}';
            
            console.log("Comment Generation Values:");
            console.log("AVG Score:", avgScore);
            console.log("Partner Name:", partnerName);
            console.log("Engagement Type:", engagementType);
            console.log("Date Completed:", dateCompleted);
            console.log("Vertical:", vertical);
            
            const comment = `## Feedback Analysis
            
            üìä **AVG Score**: ${avgScore}
            üë• **Partner**: ${partnerName}
            üìÖ **Date Completed**: ${dateCompleted}
            üìù **Engagement Type**: ${engagementType}
            üåé **Vertical**: ${vertical}
            
            *This analysis was automatically generated based on the feedback submission.*
            *Last processed: ${{ env.TIMESTAMP }} UTC*
            *Generated by: ${{ github.actor }}*
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Update issue title to include AVG score if not already there
            if (!context.payload.issue.title.includes('AVG:')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `${context.payload.issue.title} [AVG: ${avgScore}]`
              });
            }

      # Trigger the new add-to-project-cli workflow
      - name: Trigger Add to Project CLI
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'add-to-project-cli.yml',
                ref: 'main',  // Make sure this matches your default branch
                inputs: {
                  issue_number: context.issue.number.toString()
                }
              });
              console.log(`Triggered add-to-project-cli workflow for issue #${context.issue.number}`);
            } catch (error) {
              console.log(`Error triggering add-to-project-cli workflow: ${error.message}`);
              
              // If the workflow doesn't exist yet or can't be triggered, invoke the issue URL directly
              console.log("Falling back to direct project integration...");
              
              const issueId = context.payload.issue.node_id;
              console.log(`Issue GraphQL Node ID: ${issueId}`);
              
              // This is a simple announcement so we know what's happening
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: "‚öôÔ∏è Attempting to add this issue to the project board. Check the Actions tab for progress."
              });
            }

name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    # Only run on issues with the feedback label or title containing [Feedback]
    if: contains(github.event.issue.title, '[Feedback]') || contains(github.event.issue.labels.*.name, 'feedback')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      # Add this check to prevent duplicate runs on edited issues that already have CSAT comments
      - name: Check for existing CSAT comments
        id: check_comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Check if this is an edit and we've already processed it
            if (context.payload.action === 'edited') {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              });
              
              // Look for our Feedback Analysis comment
              const hasAnalysisComment = comments.data.some(
                comment => comment.body && comment.body.includes('Feedback Analysis')
              );
              
              if (hasAnalysisComment) {
                console.log('Issue already has Feedback Analysis comment, skipping processing');
                core.setOutput('skip_processing', 'true');
                return;
              }
            }
            
            core.setOutput('skip_processing', 'false');

      - name: Checkout repository
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PROJECT_PAT }}

      - name: Add feedback label if missing
        if: steps.check_comments.outputs.skip_processing != 'true' && !contains(github.event.issue.labels.*.name, 'feedback')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['feedback']
            })

      - name: Extract feedback data
        if: steps.check_comments.outputs.skip_processing != 'true'
        id: extract_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Helper function to extract form fields with various formats
            function extractValue(fieldName, isNumber = false) {
              // Try multiple patterns to match various form formats
              const patterns = [
                // Form checkbox/dropdown selection format
                new RegExp(`${fieldName}.*?\\n.*?- (.*?)($|\\n)`, 's'),
                // Form input format
                new RegExp(`${fieldName}.*?\\n\\s*(.*?)($|\\n)`, 's'),
                // Key-value format
                new RegExp(`${fieldName}.*?: *(.*?)($|\\n)`, 's'),
                // GitHub form format with ###
                new RegExp(`### ${fieldName}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // Direct match for numbers
                isNumber ? new RegExp(`${fieldName}[\\s\\S]*?(\\d+\\.?\\d*)`) : null
              ].filter(Boolean);
              
              for (const pattern of patterns) {
                const match = body.match(pattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              // Try extracting by form field ID
              const fieldIdMap = {
                'AVG Overall Customer Satisfaction': 'overall_satisfaction',
                'AVG Quality of Work/Material': 'quality_of_work',
                'AVG Effectiveness of Communication': 'communication',
                'AVG Impact/Value of Service': 'impact_value',
                'Partner Name': 'partner_name',
                'Engagement Type': 'engagement_type',
                'Date Completed': 'date_completed',
                'Vertical': 'vertical'
              };
              
              const fieldId = fieldIdMap[fieldName];
              if (fieldId) {
                const idPattern = new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's');
                const match = body.match(idPattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              return null;
            }
            
            // Extract ratings using the helper function
            const overallSatisfaction = extractValue('AVG Overall Customer Satisfaction', true);
            const qualityOfWork = extractValue('AVG Quality of Work/Material', true);
            const communication = extractValue('AVG Effectiveness of Communication', true);
            const impactValue = extractValue('AVG Impact/Value of Service', true);
            
            // Extract other fields
            const partnerName = extractValue('Partner Name');
            const engagementType = extractValue('Engagement Type');
            const dateCompleted = extractValue('Date Completed');
            const vertical = extractValue('Vertical');
            
            // Calculate CSAT score
            let csatScore = 0;
            let validRatings = 0;
            
            const addRating = (rating) => {
              if (rating) {
                const value = parseFloat(rating);
                if (!isNaN(value)) {
                  csatScore += value;
                  validRatings += 1;
                }
              }
            };
            
            addRating(overallSatisfaction);
            addRating(qualityOfWork);
            addRating(communication);
            addRating(impactValue);
            
            const finalCsatScore = validRatings > 0 ? (csatScore / validRatings).toFixed(2) : "N/A";
            console.log(`Final CSAT Score: ${finalCsatScore} (from ${validRatings} valid ratings)`);
            
            // Set outputs
            core.setOutput('csat_score', finalCsatScore);
            core.setOutput('partner_name', partnerName || "Unknown");
            core.setOutput('engagement_type', engagementType || "Unknown");
            core.setOutput('date_completed', dateCompleted || "Unknown");
            core.setOutput('vertical', vertical || "Unknown");

      - name: Add CSAT score comment
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const csatScore = '${{ steps.extract_data.outputs.csat_score }}';
            const partner = '${{ steps.extract_data.outputs.partner_name }}';
            const vertical = '${{ steps.extract_data.outputs.vertical }}';
            
            const comment = `## Feedback Analysis
            
            üìä **CSAT Score**: ${csatScore}
            üë• **Partner**: ${partner}
            üìÖ **Date Completed**: ${{ steps.extract_data.outputs.date_completed }}
            üìù **Engagement Type**: ${{ steps.extract_data.outputs.engagement_type }}
            üåé **Vertical**: ${vertical}
            
            *This analysis was automatically generated based on the feedback submission.*
            *Last processed: 2025-07-08 23:48:06 UTC*
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Update issue title to include CSAT score if not already there
            if (!context.payload.issue.title.includes('CSAT:')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `${context.payload.issue.title} [CSAT: ${csatScore}]`
              });
            }

      # STEP 1: Add to project using the official GitHub action (simplified approach)
      - name: Add issue to project
        if: steps.check_comments.outputs.skip_processing != 'true'
        id: add-to-project
        uses: actions/add-to-project@v0.5.0
        with:
          # IMPORTANT: Updated to your specific project URL
          project-url: https://github.com/users/Johnaldy/projects/7
          github-token: ${{ secrets.PROJECT_PAT }}

      # STEP 2: Set field values using GitHub API directly - FIXED THE PROJECT ID ISSUE
      - name: Set project fields
        if: steps.check_comments.outputs.skip_processing != 'true' && steps.add-to-project.outputs.itemId != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const itemId = '${{ steps.add-to-project.outputs.itemId }}';
            // Extract project ID correctly from outputs
            const projectId = '${{ steps.add-to-project.outputs.projectId }}';
            
            console.log(`Successfully added issue to project. Item ID: ${itemId}`);
            console.log(`Project ID: ${projectId}`);
            
            if (!projectId || projectId === '') {
              console.log('Error: No project ID provided from add-to-project step');
              return;
            }
            
            // First, get the project fields to find the field IDs we need
            try {
              const projectQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                            dataType
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2NumberField {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, {
                projectId: projectId
              });
              
              console.log("Project fields retrieved successfully");
              
              // Log all fields for debugging
              const fields = projectData.node.fields.nodes;
              console.log("Available fields:");
              fields.forEach(field => {
                console.log(`- ${field.name}: ${field.id} (${field.dataType || 'unknown type'})`);
                if (field.options) {
                  console.log("  Options:");
                  field.options.forEach(option => {
                    console.log(`  - ${option.name}: ${option.id}`);
                  });
                }
              });
              
              // Find fields by name (case insensitive)
              const findField = (name) => {
                return fields.find(f => 
                  f.name && (
                    f.name.toLowerCase().includes(name.toLowerCase()) ||
                    name.toLowerCase().includes(f.name.toLowerCase())
                  )
                );
              };
              
              // Look for CSAT or rating field
              const csatField = findField('csat') || findField('rating') || findField('score');
              if (csatField) {
                console.log(`Found CSAT field: ${csatField.name} (${csatField.id})`);
                
                // Update CSAT field if it's a number and we have a valid CSAT score
                const csatValue = parseFloat('${{ steps.extract_data.outputs.csat_score }}');
                if (!isNaN(csatValue)) {
                  try {
                    // Use the appropriate value type based on field data type
                    const valueType = csatField.dataType === 'TEXT' ? 'text' : 'number';
                    const value = valueType === 'text' ? 
                      `{ text: "${csatValue}" }` : 
                      `{ number: ${csatValue} }`;
                    
                    const updateCsatMutation = `
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId
                          itemId: $itemId
                          fieldId: $fieldId
                          value: $value
                        }) {
                          projectV2Item { id }
                        }
                      }
                    `;
                    
                    await github.graphql(updateCsatMutation, {
                      projectId: projectId,
                      itemId: itemId,
                      fieldId: csatField.id,
                      value: valueType === 'text' ? { text: csatValue.toString() } : { number: csatValue }
                    });
                    console.log(`Updated CSAT field to ${csatValue}`);
                  } catch (e) {
                    console.log(`Error updating CSAT field: ${e.message}`);
                    
                    // Try alternative as text if number fails
                    try {
                      const updateCsatMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: { text: "${csatValue}" }
                          }) {
                            projectV2Item { id }
                          }
                        }
                      `;
                      
                      await github.graphql(updateCsatMutation, {
                        projectId: projectId,
                        itemId: itemId,
                        fieldId: csatField.id
                      });
                      console.log(`Updated CSAT field as text to ${csatValue}`);
                    } catch (textError) {
                      console.log(`Error updating CSAT as text: ${textError.message}`);
                    }
                  }
                }
              }
              
              // Similar fixes for other field updates...
              // Look for Partner field
              const partnerField = findField('partner') || findField('client') || findField('company');
              if (partnerField && partnerField.options) {
                const partnerName = '${{ steps.extract_data.outputs.partner_name }}';
                if (partnerName && partnerName !== 'Unknown') {
                  // Try to find matching option
                  const partnerOption = partnerField.options.find(opt => 
                    opt.name.toLowerCase() === partnerName.toLowerCase() ||
                    opt.name.toLowerCase().includes(partnerName.toLowerCase()) ||
                    partnerName.toLowerCase().includes(opt.name.toLowerCase())
                  );
                  
                  if (partnerOption) {
                    try {
                      const updatePartnerMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: { singleSelectOptionId: $optionId }
                          }) {
                            projectV2Item { id }
                          }
                        }
                      `;
                      
                      await github.graphql(updatePartnerMutation, {
                        projectId: projectId,
                        itemId: itemId,
                        fieldId: partnerField.id,
                        optionId: partnerOption.id
                      });
                      console.log(`Updated Partner field to ${partnerOption.name}`);
                    } catch (e) {
                      console.log(`Error updating Partner field: ${e.message}`);
                    }
                  } else {
                    console.log(`Could not find matching option for partner: ${partnerName}`);
                    console.log('Available options:');
                    partnerField.options.forEach(opt => console.log(` - ${opt.name}`));
                  }
                }
              }
              
            } catch (error) {
              console.log(`Error setting project fields: ${error.message}`);
              console.log(error.stack);
            }

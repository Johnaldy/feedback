name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    # Only run on issues with the feedback label or title containing [Feedback]
    if: contains(github.event.issue.title, '[Feedback]') || contains(github.event.issue.labels.*.name, 'feedback')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      # Add this check to prevent duplicate runs on edited issues that already have CSAT comments
      - name: Check for existing CSAT comments
        id: check_comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Check if this is an edit and we've already processed it
            if (context.payload.action === 'edited') {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              });
              
              // Look for our Feedback Analysis comment
              const hasAnalysisComment = comments.data.some(
                comment => comment.body && comment.body.includes('Feedback Analysis')
              );
              
              if (hasAnalysisComment) {
                console.log('Issue already has Feedback Analysis comment, skipping processing');
                core.setOutput('skip_processing', 'true');
                return;
              }
            }
            
            core.setOutput('skip_processing', 'false');

      - name: Add feedback label if missing
        if: steps.check_comments.outputs.skip_processing != 'true' && !contains(github.event.issue.labels.*.name, 'feedback')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['feedback']
            })

      - name: Extract feedback data
        if: steps.check_comments.outputs.skip_processing != 'true'
        id: extract_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Helper function to extract form fields with various formats
            function extractValue(fieldName, isNumber = false) {
              // Try multiple patterns to match various form formats
              const patterns = [
                // Form checkbox/dropdown selection format
                new RegExp(`${fieldName}.*?\\n.*?- (.*?)($|\\n)`, 's'),
                // Form input format
                new RegExp(`${fieldName}.*?\\n\\s*(.*?)($|\\n)`, 's'),
                // Key-value format
                new RegExp(`${fieldName}.*?: *(.*?)($|\\n)`, 's'),
                // GitHub form format with ###
                new RegExp(`### ${fieldName}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // Direct match for numbers
                isNumber ? new RegExp(`${fieldName}[\\s\\S]*?(\\d+\\.?\\d*)`) : null
              ].filter(Boolean);
              
              for (const pattern of patterns) {
                const match = body.match(pattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              // Try extracting by form field ID
              const fieldIdMap = {
                'AVG Overall Customer Satisfaction': 'overall_satisfaction',
                'AVG Quality of Work/Material': 'quality_of_work',
                'AVG Effectiveness of Communication': 'communication',
                'AVG Impact/Value of Service': 'impact_value',
                'Partner Name': 'partner_name',
                'Engagement Type': 'engagement_type',
                'Date Completed': 'date_completed',
                'Vertical': 'vertical'
              };
              
              const fieldId = fieldIdMap[fieldName];
              if (fieldId) {
                const idPattern = new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's');
                const match = body.match(idPattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              return null;
            }
            
            // Extract ratings using the helper function
            const overallSatisfaction = extractValue('AVG Overall Customer Satisfaction', true);
            const qualityOfWork = extractValue('AVG Quality of Work/Material', true);
            const communication = extractValue('AVG Effectiveness of Communication', true);
            const impactValue = extractValue('AVG Impact/Value of Service', true);
            
            // Extract other fields
            const partnerName = extractValue('Partner Name');
            const engagementType = extractValue('Engagement Type');
            const dateCompleted = extractValue('Date Completed');
            const vertical = extractValue('Vertical');
            
            // Calculate CSAT score
            let csatScore = 0;
            let validRatings = 0;
            
            const addRating = (rating) => {
              if (rating) {
                const value = parseFloat(rating);
                if (!isNaN(value)) {
                  csatScore += value;
                  validRatings += 1;
                }
              }
            };
            
            addRating(overallSatisfaction);
            addRating(qualityOfWork);
            addRating(communication);
            addRating(impactValue);
            
            const finalCsatScore = validRatings > 0 ? (csatScore / validRatings).toFixed(2) : "N/A";
            console.log(`Final CSAT Score: ${finalCsatScore} (from ${validRatings} valid ratings)`);
            
            // Set outputs
            core.setOutput('csat_score', finalCsatScore);
            core.setOutput('partner_name', partnerName || "Unknown");
            core.setOutput('engagement_type', engagementType || "Unknown");
            core.setOutput('date_completed', dateCompleted || "Unknown");
            core.setOutput('vertical', vertical || "Unknown");

      - name: Add CSAT score comment
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const csatScore = '${{ steps.extract_data.outputs.csat_score }}';
            const partner = '${{ steps.extract_data.outputs.partner_name }}';
            const vertical = '${{ steps.extract_data.outputs.vertical }}';
            
            const comment = `## Feedback Analysis
            
            üìä **CSAT Score**: ${csatScore}
            üë• **Partner**: ${partner}
            üìÖ **Date Completed**: ${{ steps.extract_data.outputs.date_completed }}
            üìù **Engagement Type**: ${{ steps.extract_data.outputs.engagement_type }}
            üåé **Vertical**: ${vertical}
            
            *This analysis was automatically generated based on the feedback submission.*
            *Last processed: 2025-07-08 23:56:56 UTC*
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Update issue title to include CSAT score if not already there
            if (!context.payload.issue.title.includes('CSAT:')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `${context.payload.issue.title} [CSAT: ${csatScore}]`
              });
            }

      # Trigger the project integration workflow
      - name: Trigger Project Integration
        if: steps.check_comments.outputs.skip_processing != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            // Trigger the project-integration workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'project-integration.yml',
              ref: context.ref,
              inputs: {
                issue_number: context.issue.number.toString()
              }
            });
            
            console.log(`Triggered project integration workflow for issue #${context.issue.number}`);

name: Process Partner Feedback

on:
  issues:
    types: [opened, edited]

jobs:
  process-feedback:
    # Only run on issues with the feedback label or title containing [Feedback]
    if: contains(github.event.issue.title, '[Feedback]') || contains(github.event.issue.labels.*.name, 'feedback')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PROJECT_PAT }}  # Changed to PROJECT_PAT

      - name: Add feedback label if missing
        if: ${{ !contains(github.event.issue.labels.*.name, 'feedback') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}  # Changed to PROJECT_PAT
          script: |
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['feedback']
            })

      - name: Extract feedback data
        id: extract_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}  # Changed to PROJECT_PAT
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            
            // Helper function to extract form fields with various formats
            function extractValue(fieldName, isNumber = false) {
              // Try multiple patterns to match various form formats
              const patterns = [
                // Form checkbox/dropdown selection format
                new RegExp(`${fieldName}.*?\\n.*?- (.*?)($|\\n)`, 's'),
                // Form input format
                new RegExp(`${fieldName}.*?\\n\\s*(.*?)($|\\n)`, 's'),
                // Key-value format
                new RegExp(`${fieldName}.*?: *(.*?)($|\\n)`, 's'),
                // GitHub form format with ###
                new RegExp(`### ${fieldName}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's'),
                // Direct match for numbers
                isNumber ? new RegExp(`${fieldName}[\\s\\S]*?(\\d+\\.?\\d*)`) : null
              ].filter(Boolean);
              
              for (const pattern of patterns) {
                const match = body.match(pattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              // Try extracting by form field ID
              const fieldIdMap = {
                'AVG Overall Customer Satisfaction': 'overall_satisfaction',
                'AVG Quality of Work/Material': 'quality_of_work',
                'AVG Effectiveness of Communication': 'communication',
                'AVG Impact/Value of Service': 'impact_value',
                'Partner Name': 'partner_name',
                'Engagement Type': 'engagement_type',
                'Date Completed': 'date_completed',
                'Vertical': 'vertical'
              };
              
              const fieldId = fieldIdMap[fieldName];
              if (fieldId) {
                const idPattern = new RegExp(`### ${fieldId}\\s*\\r?\\n\\s*(.+?)(?=\\r?\\n###|$)`, 's');
                const match = body.match(idPattern);
                if (match && match[1]) {
                  const value = match[1].trim();
                  if (value && (!isNumber || !isNaN(parseFloat(value)))) {
                    return value;
                  }
                }
              }
              
              return null;
            }
            
            // Extract ratings using the helper function
            const overallSatisfaction = extractValue('AVG Overall Customer Satisfaction', true);
            const qualityOfWork = extractValue('AVG Quality of Work/Material', true);
            const communication = extractValue('AVG Effectiveness of Communication', true);
            const impactValue = extractValue('AVG Impact/Value of Service', true);
            
            // Extract other fields
            const partnerName = extractValue('Partner Name');
            const engagementType = extractValue('Engagement Type');
            const dateCompleted = extractValue('Date Completed');
            const vertical = extractValue('Vertical');
            
            // Calculate CSAT score
            let csatScore = 0;
            let validRatings = 0;
            
            const addRating = (rating) => {
              if (rating) {
                const value = parseFloat(rating);
                if (!isNaN(value)) {
                  csatScore += value;
                  validRatings += 1;
                }
              }
            };
            
            addRating(overallSatisfaction);
            addRating(qualityOfWork);
            addRating(communication);
            addRating(impactValue);
            
            const finalCsatScore = validRatings > 0 ? (csatScore / validRatings).toFixed(2) : "N/A";
            console.log(`Final CSAT Score: ${finalCsatScore} (from ${validRatings} valid ratings)`);
            
            // Set outputs
            core.setOutput('csat_score', finalCsatScore);
            core.setOutput('partner_name', partnerName || "Unknown");
            core.setOutput('engagement_type', engagementType || "Unknown");
            core.setOutput('date_completed', dateCompleted || "Unknown");
            core.setOutput('vertical', vertical || "Unknown");

      - name: Add CSAT score comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}  # Changed to PROJECT_PAT
          script: |
            const csatScore = '${{ steps.extract_data.outputs.csat_score }}';
            const partner = '${{ steps.extract_data.outputs.partner_name }}';
            const vertical = '${{ steps.extract_data.outputs.vertical }}';
            
            const comment = `## Feedback Analysis
            
            📊 **CSAT Score**: ${csatScore}
            👥 **Partner**: ${partner}
            📅 **Date Completed**: ${{ steps.extract_data.outputs.date_completed }}
            📝 **Engagement Type**: ${{ steps.extract_data.outputs.engagement_type }}
            🌎 **Vertical**: ${vertical}
            
            *This analysis was automatically generated based on the feedback submission.*
            *Last processed: 2025-07-08 23:21:32 UTC*
            `;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
            // Update issue title to include CSAT score if not already there
            if (!context.payload.issue.title.includes('CSAT:')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `${context.payload.issue.title} [CSAT: ${csatScore}]`
              });
            }

      # STEP 1: Add to project using the official GitHub action (simplified approach)
      - name: Add issue to project
        id: add-to-project
        uses: actions/add-to-project@v0.5.0
        with:
          # IMPORTANT: Updated to your specific project URL
          project-url: https://github.com/users/Johnaldy/projects/7
          github-token: ${{ secrets.PROJECT_PAT }}

      # STEP 2: Set field values using GitHub API directly
      - name: Set project fields
        if: steps.add-to-project.outputs.itemId
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_PAT }}
          script: |
            const projectUrl = 'https://github.com/users/Johnaldy/projects/7';
            const itemId = '${{ steps.add-to-project.outputs.itemId }}';
            const projectId = '${{ steps.add-to-project.outputs.projectId }}';
            
            console.log(`Successfully added issue to project. Item ID: ${itemId}`);
            console.log(`Project ID: ${projectId}`);
            
            // First, get the project fields to find the field IDs we need
            try {
              const projectQuery = `
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery);
              console.log("Project fields retrieved successfully");
              
              // Log all fields for debugging
              const fields = projectData.node.fields.nodes;
              console.log("Available fields:");
              fields.forEach(field => {
                console.log(`- ${field.name}: ${field.id}`);
                if (field.options) {
                  console.log("  Options:");
                  field.options.forEach(option => {
                    console.log(`  - ${option.name}: ${option.id}`);
                  });
                }
              });
              
              // Find fields by name (case insensitive)
              const findField = (name) => {
                return fields.find(f => 
                  f.name.toLowerCase().includes(name.toLowerCase()) ||
                  name.toLowerCase().includes(f.name.toLowerCase())
                );
              };
              
              // Look for CSAT or rating field
              const csatField = findField('csat') || findField('rating') || findField('score');
              if (csatField) {
                console.log(`Found CSAT field: ${csatField.name} (${csatField.id})`);
                
                // Update CSAT field if it's a number and we have a valid CSAT score
                const csatValue = parseFloat('${{ steps.extract_data.outputs.csat_score }}');
                if (!isNaN(csatValue)) {
                  const updateCsatMutation = `
                    mutation {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: "${projectId}"
                        itemId: "${itemId}"
                        fieldId: "${csatField.id}"
                        value: { number: ${csatValue} }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `;
                  
                  await github.graphql(updateCsatMutation);
                  console.log(`Updated CSAT field to ${csatValue}`);
                }
              }
              
              // Look for Partner field
              const partnerField = findField('partner') || findField('client') || findField('company');
              if (partnerField && partnerField.options) {
                const partnerName = '${{ steps.extract_data.outputs.partner_name }}';
                if (partnerName && partnerName !== 'Unknown') {
                  // Try to find matching option
                  const partnerOption = partnerField.options.find(opt => 
                    opt.name.toLowerCase() === partnerName.toLowerCase() ||
                    opt.name.toLowerCase().includes(partnerName.toLowerCase()) ||
                    partnerName.toLowerCase().includes(opt.name.toLowerCase())
                  );
                  
                  if (partnerOption) {
                    const updatePartnerMutation = `
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${projectId}"
                          itemId: "${itemId}"
                          fieldId: "${partnerField.id}"
                          value: { singleSelectOptionId: "${partnerOption.id}" }
                        }) {
                          projectV2Item { id }
                        }
                      }
                    `;
                    
                    await github.graphql(updatePartnerMutation);
                    console.log(`Updated Partner field to ${partnerOption.name}`);
                  } else {
                    console.log(`Could not find matching option for partner: ${partnerName}`);
                    console.log('Available options:');
                    partnerField.options.forEach(opt => console.log(` - ${opt.name}`));
                  }
                }
              }
              
              // Look for Engagement Type field
              const typeField = findField('engagement') || findField('type');
              if (typeField && typeField.options) {
                const engagementType = '${{ steps.extract_data.outputs.engagement_type }}';
                if (engagementType && engagementType !== 'Unknown') {
                  // Try to find matching option
                  const typeOption = typeField.options.find(opt => 
                    opt.name.toLowerCase() === engagementType.toLowerCase() ||
                    opt.name.toLowerCase().includes(engagementType.toLowerCase()) ||
                    engagementType.toLowerCase().includes(opt.name.toLowerCase())
                  );
                  
                  if (typeOption) {
                    const updateTypeMutation = `
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${projectId}"
                          itemId: "${itemId}"
                          fieldId: "${typeField.id}"
                          value: { singleSelectOptionId: "${typeOption.id}" }
                        }) {
                          projectV2Item { id }
                        }
                      }
                    `;
                    
                    await github.graphql(updateTypeMutation);
                    console.log(`Updated Engagement Type field to ${typeOption.name}`);
                  } else {
                    console.log(`Could not find matching option for engagement type: ${engagementType}`);
                    console.log('Available options:');
                    typeField.options.forEach(opt => console.log(` - ${opt.name}`));
                  }
                }
              }
              
              // Look for Date field
              const dateField = findField('date') || findField('completed');
              if (dateField) {
                const dateCompleted = '${{ steps.extract_data.outputs.date_completed }}';
                if (dateCompleted && dateCompleted !== 'Unknown') {
                  try {
                    const updateDateMutation = `
                      mutation {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: "${projectId}"
                          itemId: "${itemId}"
                          fieldId: "${dateField.id}"
                          value: { date: "${dateCompleted}" }
                        }) {
                          projectV2Item { id }
                        }
                      }
                    `;
                    
                    await github.graphql(updateDateMutation);
                    console.log(`Updated Date field to ${dateCompleted}`);
                  } catch (e) {
                    console.log(`Error updating date field: ${e.message}`);
                    // Try alternative date format or text approach if needed
                  }
                }
              }
              
              // Look for Status field and set it to "New" or similar
              const statusField = findField('status');
              if (statusField && statusField.options) {
                // Look for a "New" or "Todo" option
                const newOption = statusField.options.find(opt => 
                  ['new', 'todo', 'to do', 'backlog', 'incoming'].includes(opt.name.toLowerCase())
                );
                
                if (newOption) {
                  const updateStatusMutation = `
                    mutation {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: "${projectId}"
                        itemId: "${itemId}"
                        fieldId: "${statusField.id}"
                        value: { singleSelectOptionId: "${newOption.id}" }
                      }) {
                        projectV2Item { id }
                      }
                    }
                  `;
                  
                  await github.graphql(updateStatusMutation);
                  console.log(`Set Status to "${newOption.name}"`);
                }
              }
              
            } catch (error) {
              console.log(`Error setting project fields: ${error.message}`);
              console.log(error.stack);
            }
